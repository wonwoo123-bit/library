<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dw.library.mapper.LoanMapper">
    <resultMap id="LoanDetailMap" type="Loan">
        <id property="loanId" column="loan_id"/>
        <result property="loanDate" column="loan_date"/>
        <result property="dueDate" column="due_date"/>
        <result property="returnDate" column="return_date"/>
        <result property="status" column="status"/>
        <result property="fineAmount" column="fine_amount"/>
        <result property="createdAt" column="created_at"/>

        <association property="member" javaType="Member">
            <id property="id" column="member_id"/>
            <result property="email" column="email"/>
            <result property="name" column="name"/>
        </association>

        <association property="book" javaType="Book">
            <id property="bookId" column="book_id"/>
            <result property="title" column="title"/>
            <result property="totalQuantity" column="total_quantity"/>
            <result property="availableQuantity" column="available_quantity"/>
        </association>
    </resultMap>

    <select id="getLoanById" resultMap="LoanDetailMap">
        select l.loan_id,
        l.loan_date,
        l.due_date,
        l.return_date,
        l.status,
        l.fine_amount,
        l.created_at,
        m.member_id,
        m.name,
        m.email,
        b.book_id,
        b.title,
        b.total_quantity,
        b.available_quantity
        from loan l inner join member m on l.member_id = m.member_id
        inner join book b on l.book_id = b.book_id
        where l.loan_id = #{id}
    </select>

    <insert id="saveLoan">
        INSERT INTO loan (
        member_id,
        book_id,
        loan_date,
        due_date,
        return_date,
        status,
        fine_amount,
        created_at
        )
        VALUES
        <foreach collection="listLoan" item="loan" separator=",">
            (
            #{loan.member.id},
            #{loan.book.bookId},
            #{loan.loanDate},
            #{loan.dueDate},
            #{loan.returnDate},
            #{loan.status},
            #{loan.fineAmount},
            #{loan.createdAt}
            )
        </foreach>
    </insert>

    <select id="getByOthers" resultMap="LoanDetailMap">
        select l.loan_id,
        l.loan_date,
        l.due_date,
        l.return_date,
        l.status,
        l.fine_amount,
        l.created_at,
        m.member_id,
        m.name,
        m.email,
        b.book_id,
        b.title,
        b.total_quantity,
        b.available_quantity
        from loan l inner join member m on l.member_id = m.member_id
        inner join book b on l.book_id = b.book_id
        <where>
            <if test="memberEmail != null and memberEmail != ''">
                AND m.email like concat('%', #{memberEmail}, '%')
            </if>
            <if test="status != null and status != ''" >
                AND l.status = #{status}
            </if>
        </where>
    </select>


    <update id="returnLoan">
        UPDATE loan
        SET
        return_date = now(),
        status = 'returned',
        created_at = now()
        WHERE loan_id = #{id}
    </update>

    <select id="overdue" resultMap="LoanDetailMap">
        select
        l.loan_id,
        m.name,
        b.title,
        l.loan_date,
        l.due_date,
        l.status
        from
        loan l inner join member m on l.member_id = m.member_id
        inner join book b on l.book_id = b.book_id
        where loan_id = #{loan} and status = due_date
    </select>

    <select id="getOverdueLoans" resultType="LoanOverdueDto">
        SELECT
        l.loan_id AS loanId,
        m.name AS memberName,
        b.title AS bookTitle,
        l.loan_date AS loanDate,
        l.due_date AS dueDate,
        l.status AS status
        FROM loan l
        INNER JOIN member m ON l.member_id = m.member_id
        INNER JOIN book b ON l.book_id = b.book_id
        WHERE l.status = 'overdue'
    </select>

</mapper>